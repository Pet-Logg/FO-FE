import { Button } from '@/components/common/Button'
import { TwoButtonModal } from '@/components/common/TwoButtonModal'
import { useDeletePet, useGetPet } from '@/services/pet'
import { useState } from 'react'
import { useNavigate, useParams } from 'react-router-dom'
import basicPicture from '../assets/basicPicture.png'

const PetInfo = ({ label, value }) => {
  return (
    <>
      <p className='text-left font-medium'>{label}</p>
      <p>{value}</p>
    </>
  )
}

export const PetDetail = () => {
  const nav = useNavigate()
  const { petId } = useParams()
  const [openPopup, setOpenPopup] = useState(false)
  const { data, isLoading, isError, error } = useGetPet(Number(petId))
  const deletePetMutate = useDeletePet()

  const parsedPetId = petId ? Number(petId) : null // Î¨∏ÏûêÏó¥ ‚Üí Ïà´Ïûê, ÏóÜÏúºÎ©¥ null

  const clickDeletePet = () => {
    if (parsedPetId) {
      deletePetMutate.mutate(
        { petId: parsedPetId },
        {
          onSuccess: (data) => {
            console.log('Î∞òÎ†§ÎèôÎ¨º ÏÇ≠Ï†ú ÏÑ±Í≥µ!', data)
            nav('/petManagement')
          },
          onError: (err) => {
            console.log(err)
          }
        }
      )
    }
  }

  if (isLoading)
    return (
      <p className='mx-auto flex min-h-[750px] w-[1050px] items-center justify-center text-3xl'>
        ‚è≥ Î°úÎî© Ï§ë...
      </p>
    )

  if (isError)
    return (
      <p className='mx-auto flex min-h-[750px] w-[1050px] items-center justify-center text-3xl text-red-500'>
        {error.message}
      </p>
    )

  return (
    <>
      {data && (
        <div className='flex min-h-[1000px] items-center justify-center bg-gray-100'>
          <div className='w-full max-w-md rounded-2xl bg-white p-8 shadow-lg'>
            {/* Ìé´ Ïù¥ÎØ∏ÏßÄ */}
            <img
              src={data.petImg || basicPicture}
              className='mx-auto mb-6 h-60 w-60 rounded-full border border-gray-300 object-cover'
            />

            <h1 className='mb-6 text-center text-3xl font-bold'>
              {data.petName}
            </h1>

            {/* Í∏∞Î≥∏ Ï†ïÎ≥¥ */}
            <div>
              <h1 className='mb-3 ml-2 text-lg font-bold'>üê∂ Í∏∞Î≥∏ Ï†ïÎ≥¥</h1>
              <div className='mx-10 grid grid-cols-2 gap-y-2 border-b pb-7'>
                <PetInfo
                  label={data.animal === 'DOG' ? 'Í≤¨Ï¢Ö' : 'Î¨òÏ¢Ö'}
                  value={data.petBreed || '-'}
                />

                <PetInfo
                  label='ÏÑ±Î≥Ñ'
                  value={data.petGender === 'MALE' ? 'ÎÇ®Ïûê' : 'Ïó¨Ïûê'}
                />

                <PetInfo
                  label='ÏÉùÏùº'
                  value={
                    data.petBirth
                      ? new Date(data.petBirth).toISOString().split('T')[0]
                      : '-'
                  }
                />
                <PetInfo label='Î™∏Î¨¥Í≤å' value={`${data.petWeight} kg`} />
              </div>
            </div>

            {/* Í±¥Í∞ï Ï†ïÎ≥¥ */}
            <div>
              <h1 className='mb-3 ml-2 pt-7 text-lg font-bold'>üíä Í±¥Í∞ï Ï†ïÎ≥¥</h1>
              <div className='mx-10 grid grid-cols-2 gap-y-2'>
                <PetInfo
                  label='Ï§ëÏÑ±Ìôî Ïó¨Î∂Ä'
                  value={
                    data.isNeutered
                      ? data.isNeutered === 'Y'
                        ? 'ÌñàÏñ¥Ïöî'
                        : 'ÏïàÌñàÏñ¥Ïöî'
                      : '-'
                  }
                />

                <PetInfo
                  label='ÏóºÎ†§ÏßàÌôò'
                  value={data.disease?.length ? data.disease.join(', ') : '-'}
                />

                <PetInfo
                  label='ÏïåÎü¨ÏßÄ'
                  value={data.allergy?.length ? data.allergy.join(', ') : '-'}
                />
              </div>
            </div>

            <div className='flex justify-center gap-7 pt-9'>
              <Button
                text={'ÏàòÏ†ï'}
                type={'normal'}
                onClick={() => {
                  nav(`/createPet?petId=${petId}`, {
                    state: { mode: 'edit' }
                  })
                }}
              />
              <Button
                text={'ÏÇ≠Ï†ú'}
                type={'delete'}
                onClick={() => setOpenPopup(true)}
              />
            </div>
          </div>

          {openPopup && (
            <TwoButtonModal
              text='Î∞òÎ†§ÎèôÎ¨ºÏùÑ ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?'
              subText='ÏÇ≠Ï†úÌïú Î∞òÎ†§ÎèôÎ¨ºÏùÄ Î≥µÍµ¨Ìï† Ïàò ÏóÜÏäµÎãàÎã§.'
              firstButton='ÏÇ≠Ï†ú'
              secondButton='Ï∑®ÏÜå'
              firstType='delete'
              secondType='cancel'
              onCancle={() => {
                setOpenPopup(false)
              }}
              onConfirm={clickDeletePet}
            />
          )}
        </div>
      )}
    </>
  )
}
